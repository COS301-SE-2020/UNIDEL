@{
    ViewData["Title"] = "Home Page";
}
@*@model List<UniDelWebApplication.Models.Customer> PROVIDE THIS CODE TO ACCESS THE MODEL SENT BY FUNCTION return View(uniDelDb.Customers.ToList())*@

    <div class="text-center">
        <h1 class="display-4">Welcome to UniDel</h1>
        <img src="Images/Logo.png" class="rounded" width="300">
        <!-- <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>-->
    </div>

<!--THIS HERE IS AN HTML PAGE ON STEROIDS... IMAGINE YOURSELF EDITING ONLY THE BODY OF AN HTML PAGE THATS WHATS GOING ON HERE.
    ALL THAT OTHER STUFF IS RENDERED ON ANOTHER PAGE

    ASP.NET MVC HAS A COOL FEATURE CALLED RAZOR THAT ALLOWS YOU TO RENDER C# CODE ON AN HTML PAGE MUCH LIKE PHP ON A NORMAL HTML FILE.
    TO USE THIS FEATURE YOU MAKE USE OF THE 'AT' SYMBOL... (CAN'T EVEN USE IT NOW COZ ITS ALREADY FIRED UP EVEN IN THE COMMENTS)
    -->

@{
    //THIS CAN BE USED TO RENDER A BLOCK OF C# CODE AND WHATS COOL IS THAT YOU CAN SWITCH BETWEEN HTML AND C# EASILY
}

@* THIS IS A RAZOR COMMENT *@

@*

    <h1>List of Customers</h1>

    <table border="1" cellpadding="11">     THIS IS THE CODE TO CREATE A TABLE TO
        @foreach(var item in Model)         THIS CODE WOULD ECHO ALL ITEMS IN OUR MODEL LIST TO THE VIEW (NOTE MODEL DOES NOT ALWAYS HAVE TO BE A LIST)
        {
            <tr>
                <td>@item.CustomerID</td>   MIXTURE OF HTML AND C#... C# IS CALLED USING THE @ SIGN
                <td>@item.CompanyName</td>
            </tr>
        }
    </table>

    THE BIGGEST DIFFERENCES WITH STANDARD HTML IS NAVIGATION BETWEEN PAGES... WE WOULD NOT USE STANDARD <a href=''></a> tags...
    INSTEAD WE WOULD USE @HTML.ActionLink("Text on link","Action i.e. function to call","controllername") e.g. @Html.ActionLink("Go to page","Index","Home") this
    would create a tag like this <a href='Home/Index'>Go to page</a>

    ANOTHER OF THE MAJOR DIFFERENCES IS CREATING FORMS

    @using(Html.BeginForm("Add","Home",FormMethod.Post)) if image will be submitted -> ("Add","Home",FormMethod.Post,new { enctype="mutlipart/form-data"})
    { //CONSIDER THIS THE <form method='post' action='home/add/'> tag
        
        IN HERE IT'S STANDARD HTML FORM INPUT. NOTHING FANCY
        <input type='text' name='INCLUDE NAME SO THAT IT IS ACCESSIBLE BY THE CONTROLLER' /> <br>
        <input type="submit" value="Add" />
    
    } //AND CONSIDER THIS THE </form> tag
*@



